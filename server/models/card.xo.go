// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Card represents a row from 'public.cards'.
type Card struct {
	ID              int           `json:"id"`                // id
	CardSerial      int64         `json:"card_serial"`       // card_serial
	ProvisionDate   int64         `json:"provision_date"`    // provision_date
	ProvisionAt     time.Time     `json:"provision_at"`      // provision_at
	ProvisionBy     int           `json:"provision_by"`      // provision_by
	DataFmtVer      int           `json:"data_fmt_ver"`      // data_fmt_ver
	OwnerUserID     sql.NullInt64 `json:"owner_user_id"`     // owner_user_id
	ActiveContentID sql.NullInt64 `json:"active_content_id"` // active_content_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Card exists in the database.
func (c *Card) Exists() bool {
	return c._exists
}

// Deleted provides information if the Card has been deleted from the database.
func (c *Card) Deleted() bool {
	return c._deleted
}

// Insert inserts the Card to the database.
func (c *Card) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.cards (` +
		`card_serial, provision_date, provision_at, provision_by, data_fmt_ver, owner_user_id, active_content_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, c.CardSerial, c.ProvisionDate, c.ProvisionAt, c.ProvisionBy, c.DataFmtVer, c.OwnerUserID, c.ActiveContentID)
	err = db.QueryRow(sqlstr, c.CardSerial, c.ProvisionDate, c.ProvisionAt, c.ProvisionBy, c.DataFmtVer, c.OwnerUserID, c.ActiveContentID).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Card in the database.
func (c *Card) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.cards SET (` +
		`card_serial, provision_date, provision_at, provision_by, data_fmt_ver, owner_user_id, active_content_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE id = $8`

	// run query
	XOLog(sqlstr, c.CardSerial, c.ProvisionDate, c.ProvisionAt, c.ProvisionBy, c.DataFmtVer, c.OwnerUserID, c.ActiveContentID, c.ID)
	_, err = db.Exec(sqlstr, c.CardSerial, c.ProvisionDate, c.ProvisionAt, c.ProvisionBy, c.DataFmtVer, c.OwnerUserID, c.ActiveContentID, c.ID)
	return err
}

// Save saves the Card to the database.
func (c *Card) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Card.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Card) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.cards (` +
		`id, card_serial, provision_date, provision_at, provision_by, data_fmt_ver, owner_user_id, active_content_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, card_serial, provision_date, provision_at, provision_by, data_fmt_ver, owner_user_id, active_content_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.card_serial, EXCLUDED.provision_date, EXCLUDED.provision_at, EXCLUDED.provision_by, EXCLUDED.data_fmt_ver, EXCLUDED.owner_user_id, EXCLUDED.active_content_id` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.CardSerial, c.ProvisionDate, c.ProvisionAt, c.ProvisionBy, c.DataFmtVer, c.OwnerUserID, c.ActiveContentID)
	_, err = db.Exec(sqlstr, c.ID, c.CardSerial, c.ProvisionDate, c.ProvisionAt, c.ProvisionBy, c.DataFmtVer, c.OwnerUserID, c.ActiveContentID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Card from the database.
func (c *Card) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.cards WHERE id = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CardCompiledContent returns the CardCompiledContent associated with the Card's ActiveContentID (active_content_id).
//
// Generated from foreign key 'cards_active_content_id_fkey'.
func (c *Card) CardCompiledContent(db XODB) (*CardCompiledContent, error) {
	return CardCompiledContentByID(db, int(c.ActiveContentID.Int64))
}

// UserByOwnerUserID returns the User associated with the Card's OwnerUserID (owner_user_id).
//
// Generated from foreign key 'cards_owner_user_id_fkey'.
func (c *Card) UserByOwnerUserID(db XODB) (*User, error) {
	return UserByID(db, int(c.OwnerUserID.Int64))
}

// UserByProvisionBy returns the User associated with the Card's ProvisionBy (provision_by).
//
// Generated from foreign key 'cards_provision_by_fkey'.
func (c *Card) UserByProvisionBy(db XODB) (*User, error) {
	return UserByID(db, c.ProvisionBy)
}

// CardByCardSerial retrieves a row from 'public.cards' as a Card.
//
// Generated from index 'cards_card_serial_key'.
func CardByCardSerial(db XODB, cardSerial int64) (*Card, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, card_serial, provision_date, provision_at, provision_by, data_fmt_ver, owner_user_id, active_content_id ` +
		`FROM public.cards ` +
		`WHERE card_serial = $1`

	// run query
	XOLog(sqlstr, cardSerial)
	c := Card{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, cardSerial).Scan(&c.ID, &c.CardSerial, &c.ProvisionDate, &c.ProvisionAt, &c.ProvisionBy, &c.DataFmtVer, &c.OwnerUserID, &c.ActiveContentID)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CardByID retrieves a row from 'public.cards' as a Card.
//
// Generated from index 'cards_pkey'.
func CardByID(db XODB, id int) (*Card, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, card_serial, provision_date, provision_at, provision_by, data_fmt_ver, owner_user_id, active_content_id ` +
		`FROM public.cards ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	c := Card{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.CardSerial, &c.ProvisionDate, &c.ProvisionAt, &c.ProvisionBy, &c.DataFmtVer, &c.OwnerUserID, &c.ActiveContentID)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
