// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import "errors"

// DoorAccessGroup represents a row from 'public.door_access_groups'.
type DoorAccessGroup struct {
	ID             int  `json:"id"`               // id
	AccessGroupID  int  `json:"access_group_id"`  // access_group_id
	DoorID         int  `json:"door_id"`          // door_id
	ActionCode     int  `json:"action_code"`      // action_code
	ActionOrder    int  `json:"action_order"`     // action_order
	GroupIsManager bool `json:"group_is_manager"` // group_is_manager

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DoorAccessGroup exists in the database.
func (dag *DoorAccessGroup) Exists() bool {
	return dag._exists
}

// Deleted provides information if the DoorAccessGroup has been deleted from the database.
func (dag *DoorAccessGroup) Deleted() bool {
	return dag._deleted
}

// Insert inserts the DoorAccessGroup to the database.
func (dag *DoorAccessGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dag._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.door_access_groups (` +
		`access_group_id, door_id, action_code, action_order, group_is_manager` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, dag.AccessGroupID, dag.DoorID, dag.ActionCode, dag.ActionOrder, dag.GroupIsManager)
	err = db.QueryRow(sqlstr, dag.AccessGroupID, dag.DoorID, dag.ActionCode, dag.ActionOrder, dag.GroupIsManager).Scan(&dag.ID)
	if err != nil {
		return err
	}

	// set existence
	dag._exists = true

	return nil
}

// Update updates the DoorAccessGroup in the database.
func (dag *DoorAccessGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dag._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dag._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.door_access_groups SET (` +
		`access_group_id, door_id, action_code, action_order, group_is_manager` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, dag.AccessGroupID, dag.DoorID, dag.ActionCode, dag.ActionOrder, dag.GroupIsManager, dag.ID)
	_, err = db.Exec(sqlstr, dag.AccessGroupID, dag.DoorID, dag.ActionCode, dag.ActionOrder, dag.GroupIsManager, dag.ID)
	return err
}

// Save saves the DoorAccessGroup to the database.
func (dag *DoorAccessGroup) Save(db XODB) error {
	if dag.Exists() {
		return dag.Update(db)
	}

	return dag.Insert(db)
}

// Upsert performs an upsert for DoorAccessGroup.
//
// NOTE: PostgreSQL 9.5+ only
func (dag *DoorAccessGroup) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if dag._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.door_access_groups (` +
		`id, access_group_id, door_id, action_code, action_order, group_is_manager` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, access_group_id, door_id, action_code, action_order, group_is_manager` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.access_group_id, EXCLUDED.door_id, EXCLUDED.action_code, EXCLUDED.action_order, EXCLUDED.group_is_manager` +
		`)`

	// run query
	XOLog(sqlstr, dag.ID, dag.AccessGroupID, dag.DoorID, dag.ActionCode, dag.ActionOrder, dag.GroupIsManager)
	_, err = db.Exec(sqlstr, dag.ID, dag.AccessGroupID, dag.DoorID, dag.ActionCode, dag.ActionOrder, dag.GroupIsManager)
	if err != nil {
		return err
	}

	// set existence
	dag._exists = true

	return nil
}

// Delete deletes the DoorAccessGroup from the database.
func (dag *DoorAccessGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dag._exists {
		return nil
	}

	// if deleted, bail
	if dag._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.door_access_groups WHERE id = $1`

	// run query
	XOLog(sqlstr, dag.ID)
	_, err = db.Exec(sqlstr, dag.ID)
	if err != nil {
		return err
	}

	// set deleted
	dag._deleted = true

	return nil
}

// AccessGroup returns the AccessGroup associated with the DoorAccessGroup's AccessGroupID (access_group_id).
//
// Generated from foreign key 'door_access_groups_access_group_id_fkey'.
func (dag *DoorAccessGroup) AccessGroup(db XODB) (*AccessGroup, error) {
	return AccessGroupByID(db, dag.AccessGroupID)
}

// Door returns the Door associated with the DoorAccessGroup's DoorID (door_id).
//
// Generated from foreign key 'door_access_groups_door_id_fkey'.
func (dag *DoorAccessGroup) Door(db XODB) (*Door, error) {
	return DoorByID(db, dag.DoorID)
}

// DoorAccessGroupByDoorIDAccessGroupID retrieves a row from 'public.door_access_groups' as a DoorAccessGroup.
//
// Generated from index 'door_access_groups_door_id_access_group_id_key'.
func DoorAccessGroupByDoorIDAccessGroupID(db XODB, doorID int, accessGroupID int) (*DoorAccessGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, access_group_id, door_id, action_code, action_order, group_is_manager ` +
		`FROM public.door_access_groups ` +
		`WHERE door_id = $1 AND access_group_id = $2`

	// run query
	XOLog(sqlstr, doorID, accessGroupID)
	dag := DoorAccessGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, doorID, accessGroupID).Scan(&dag.ID, &dag.AccessGroupID, &dag.DoorID, &dag.ActionCode, &dag.ActionOrder, &dag.GroupIsManager)
	if err != nil {
		return nil, err
	}

	return &dag, nil
}

// DoorAccessGroupByID retrieves a row from 'public.door_access_groups' as a DoorAccessGroup.
//
// Generated from index 'door_access_groups_pkey'.
func DoorAccessGroupByID(db XODB, id int) (*DoorAccessGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, access_group_id, door_id, action_code, action_order, group_is_manager ` +
		`FROM public.door_access_groups ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	dag := DoorAccessGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&dag.ID, &dag.AccessGroupID, &dag.DoorID, &dag.ActionCode, &dag.ActionOrder, &dag.GroupIsManager)
	if err != nil {
		return nil, err
	}

	return &dag, nil
}

// DoorAccessGroupByDoorIDActionOrder retrieves a row from 'public.door_access_groups' as a DoorAccessGroup.
//
// Generated from index 'door_access_groups_query'.
func DoorAccessGroupByDoorIDActionOrder(db XODB, doorID int, actionOrder int) (*DoorAccessGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, access_group_id, door_id, action_code, action_order, group_is_manager ` +
		`FROM public.door_access_groups ` +
		`WHERE door_id = $1 AND action_order = $2`

	// run query
	XOLog(sqlstr, doorID, actionOrder)
	dag := DoorAccessGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, doorID, actionOrder).Scan(&dag.ID, &dag.AccessGroupID, &dag.DoorID, &dag.ActionCode, &dag.ActionOrder, &dag.GroupIsManager)
	if err != nil {
		return nil, err
	}

	return &dag, nil
}
