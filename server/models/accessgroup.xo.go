// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import "errors"

// AccessGroup represents a row from 'public.access_groups'.
type AccessGroup struct {
	ID          int    `json:"id"`            // id
	Name        string `json:"name"`          // name
	Description string `json:"description"`   // description
	CardGroupID int    `json:"card_group_id"` // card_group_id
	IsSpecial   bool   `json:"is_special"`    // is_special

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AccessGroup exists in the database.
func (ag *AccessGroup) Exists() bool {
	return ag._exists
}

// Deleted provides information if the AccessGroup has been deleted from the database.
func (ag *AccessGroup) Deleted() bool {
	return ag._deleted
}

// Insert inserts the AccessGroup to the database.
func (ag *AccessGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ag._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.access_groups (` +
		`name, description, card_group_id, is_special` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ag.Name, ag.Description, ag.CardGroupID, ag.IsSpecial)
	err = db.QueryRow(sqlstr, ag.Name, ag.Description, ag.CardGroupID, ag.IsSpecial).Scan(&ag.ID)
	if err != nil {
		return err
	}

	// set existence
	ag._exists = true

	return nil
}

// Update updates the AccessGroup in the database.
func (ag *AccessGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ag._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ag._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.access_groups SET (` +
		`name, description, card_group_id, is_special` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, ag.Name, ag.Description, ag.CardGroupID, ag.IsSpecial, ag.ID)
	_, err = db.Exec(sqlstr, ag.Name, ag.Description, ag.CardGroupID, ag.IsSpecial, ag.ID)
	return err
}

// Save saves the AccessGroup to the database.
func (ag *AccessGroup) Save(db XODB) error {
	if ag.Exists() {
		return ag.Update(db)
	}

	return ag.Insert(db)
}

// Upsert performs an upsert for AccessGroup.
//
// NOTE: PostgreSQL 9.5+ only
func (ag *AccessGroup) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ag._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.access_groups (` +
		`id, name, description, card_group_id, is_special` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, description, card_group_id, is_special` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.description, EXCLUDED.card_group_id, EXCLUDED.is_special` +
		`)`

	// run query
	XOLog(sqlstr, ag.ID, ag.Name, ag.Description, ag.CardGroupID, ag.IsSpecial)
	_, err = db.Exec(sqlstr, ag.ID, ag.Name, ag.Description, ag.CardGroupID, ag.IsSpecial)
	if err != nil {
		return err
	}

	// set existence
	ag._exists = true

	return nil
}

// Delete deletes the AccessGroup from the database.
func (ag *AccessGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ag._exists {
		return nil
	}

	// if deleted, bail
	if ag._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.access_groups WHERE id = $1`

	// run query
	XOLog(sqlstr, ag.ID)
	_, err = db.Exec(sqlstr, ag.ID)
	if err != nil {
		return err
	}

	// set deleted
	ag._deleted = true

	return nil
}

// AccessGroupByCardGroupID retrieves a row from 'public.access_groups' as a AccessGroup.
//
// Generated from index 'access_groups_card_group_id_key'.
func AccessGroupByCardGroupID(db XODB, cardGroupID int) (*AccessGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, description, card_group_id, is_special ` +
		`FROM public.access_groups ` +
		`WHERE card_group_id = $1`

	// run query
	XOLog(sqlstr, cardGroupID)
	ag := AccessGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, cardGroupID).Scan(&ag.ID, &ag.Name, &ag.Description, &ag.CardGroupID, &ag.IsSpecial)
	if err != nil {
		return nil, err
	}

	return &ag, nil
}

// AccessGroupByID retrieves a row from 'public.access_groups' as a AccessGroup.
//
// Generated from index 'access_groups_pkey'.
func AccessGroupByID(db XODB, id int) (*AccessGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, description, card_group_id, is_special ` +
		`FROM public.access_groups ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ag := AccessGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ag.ID, &ag.Name, &ag.Description, &ag.CardGroupID, &ag.IsSpecial)
	if err != nil {
		return nil, err
	}

	return &ag, nil
}
