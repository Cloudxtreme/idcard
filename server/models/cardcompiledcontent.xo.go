// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// CardCompiledContent represents a row from 'public.card_compiled_content'.
type CardCompiledContent struct {
	ID            int           `json:"id"`             // id
	IDCardID      sql.NullInt64 `json:"id_card_id"`     // id_card_id
	Files         []byte        `json:"files"`          // files
	CreationDate  int64         `json:"creation_date"`  // creation_date
	CreationAt    time.Time     `json:"creation_at"`    // creation_at
	CreationBy    int           `json:"creation_by"`    // creation_by
	Activated     bool          `json:"activated"`      // activated
	NeedsApproval bool          `json:"needs_approval"` // needs_approval
	ApprovedBy    sql.NullInt64 `json:"approved_by"`    // approved_by

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CardCompiledContent exists in the database.
func (ccc *CardCompiledContent) Exists() bool {
	return ccc._exists
}

// Deleted provides information if the CardCompiledContent has been deleted from the database.
func (ccc *CardCompiledContent) Deleted() bool {
	return ccc._deleted
}

// Insert inserts the CardCompiledContent to the database.
func (ccc *CardCompiledContent) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ccc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.card_compiled_content (` +
		`id_card_id, files, creation_date, creation_at, creation_by, activated, needs_approval, approved_by` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ccc.IDCardID, ccc.Files, ccc.CreationDate, ccc.CreationAt, ccc.CreationBy, ccc.Activated, ccc.NeedsApproval, ccc.ApprovedBy)
	err = db.QueryRow(sqlstr, ccc.IDCardID, ccc.Files, ccc.CreationDate, ccc.CreationAt, ccc.CreationBy, ccc.Activated, ccc.NeedsApproval, ccc.ApprovedBy).Scan(&ccc.ID)
	if err != nil {
		return err
	}

	// set existence
	ccc._exists = true

	return nil
}

// Update updates the CardCompiledContent in the database.
func (ccc *CardCompiledContent) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ccc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ccc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.card_compiled_content SET (` +
		`id_card_id, files, creation_date, creation_at, creation_by, activated, needs_approval, approved_by` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE id = $9`

	// run query
	XOLog(sqlstr, ccc.IDCardID, ccc.Files, ccc.CreationDate, ccc.CreationAt, ccc.CreationBy, ccc.Activated, ccc.NeedsApproval, ccc.ApprovedBy, ccc.ID)
	_, err = db.Exec(sqlstr, ccc.IDCardID, ccc.Files, ccc.CreationDate, ccc.CreationAt, ccc.CreationBy, ccc.Activated, ccc.NeedsApproval, ccc.ApprovedBy, ccc.ID)
	return err
}

// Save saves the CardCompiledContent to the database.
func (ccc *CardCompiledContent) Save(db XODB) error {
	if ccc.Exists() {
		return ccc.Update(db)
	}

	return ccc.Insert(db)
}

// Upsert performs an upsert for CardCompiledContent.
//
// NOTE: PostgreSQL 9.5+ only
func (ccc *CardCompiledContent) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ccc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.card_compiled_content (` +
		`id, id_card_id, files, creation_date, creation_at, creation_by, activated, needs_approval, approved_by` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, id_card_id, files, creation_date, creation_at, creation_by, activated, needs_approval, approved_by` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.id_card_id, EXCLUDED.files, EXCLUDED.creation_date, EXCLUDED.creation_at, EXCLUDED.creation_by, EXCLUDED.activated, EXCLUDED.needs_approval, EXCLUDED.approved_by` +
		`)`

	// run query
	XOLog(sqlstr, ccc.ID, ccc.IDCardID, ccc.Files, ccc.CreationDate, ccc.CreationAt, ccc.CreationBy, ccc.Activated, ccc.NeedsApproval, ccc.ApprovedBy)
	_, err = db.Exec(sqlstr, ccc.ID, ccc.IDCardID, ccc.Files, ccc.CreationDate, ccc.CreationAt, ccc.CreationBy, ccc.Activated, ccc.NeedsApproval, ccc.ApprovedBy)
	if err != nil {
		return err
	}

	// set existence
	ccc._exists = true

	return nil
}

// Delete deletes the CardCompiledContent from the database.
func (ccc *CardCompiledContent) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ccc._exists {
		return nil
	}

	// if deleted, bail
	if ccc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.card_compiled_content WHERE id = $1`

	// run query
	XOLog(sqlstr, ccc.ID)
	_, err = db.Exec(sqlstr, ccc.ID)
	if err != nil {
		return err
	}

	// set deleted
	ccc._deleted = true

	return nil
}

// UserByApprovedBy returns the User associated with the CardCompiledContent's ApprovedBy (approved_by).
//
// Generated from foreign key 'card_compiled_content_approved_by_fkey'.
func (ccc *CardCompiledContent) UserByApprovedBy(db XODB) (*User, error) {
	return UserByID(db, int(ccc.ApprovedBy.Int64))
}

// UserByCreationBy returns the User associated with the CardCompiledContent's CreationBy (creation_by).
//
// Generated from foreign key 'card_compiled_content_creation_by_fkey'.
func (ccc *CardCompiledContent) UserByCreationBy(db XODB) (*User, error) {
	return UserByID(db, ccc.CreationBy)
}

// Card returns the Card associated with the CardCompiledContent's IDCardID (id_card_id).
//
// Generated from foreign key 'card_compiled_content_id_card_id_fkey'.
func (ccc *CardCompiledContent) Card(db XODB) (*Card, error) {
	return CardByID(db, int(ccc.IDCardID.Int64))
}

// CardCompiledContentByID retrieves a row from 'public.card_compiled_content' as a CardCompiledContent.
//
// Generated from index 'card_compiled_content_pkey'.
func CardCompiledContentByID(db XODB, id int) (*CardCompiledContent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, id_card_id, files, creation_date, creation_at, creation_by, activated, needs_approval, approved_by ` +
		`FROM public.card_compiled_content ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ccc := CardCompiledContent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ccc.ID, &ccc.IDCardID, &ccc.Files, &ccc.CreationDate, &ccc.CreationAt, &ccc.CreationBy, &ccc.Activated, &ccc.NeedsApproval, &ccc.ApprovedBy)
	if err != nil {
		return nil, err
	}

	return &ccc, nil
}
