// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// User represents a row from 'public.users'.
type User struct {
	ID          int            `json:"id"`            // id
	FullName    string         `json:"full_name"`     // full_name
	IntraLogin  sql.NullString `json:"intra_login"`   // intra_login
	IntraUserID sql.NullInt64  `json:"intra_user_id"` // intra_user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.users (` +
		`full_name, intra_login, intra_user_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, u.FullName, u.IntraLogin, u.IntraUserID)
	err = db.QueryRow(sqlstr, u.FullName, u.IntraLogin, u.IntraUserID).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`full_name, intra_login, intra_user_id` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, u.FullName, u.IntraLogin, u.IntraUserID, u.ID)
	_, err = db.Exec(sqlstr, u.FullName, u.IntraLogin, u.IntraUserID, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`id, full_name, intra_login, intra_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, full_name, intra_login, intra_user_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.full_name, EXCLUDED.intra_login, EXCLUDED.intra_user_id` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.FullName, u.IntraLogin, u.IntraUserID)
	_, err = db.Exec(sqlstr, u.ID, u.FullName, u.IntraLogin, u.IntraUserID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UserByFullName retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_full_name_key'.
func UserByFullName(db XODB, fullName string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, full_name, intra_login, intra_user_id ` +
		`FROM public.users ` +
		`WHERE full_name = $1`

	// run query
	XOLog(sqlstr, fullName)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, fullName).Scan(&u.ID, &u.FullName, &u.IntraLogin, &u.IntraUserID)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByIntraLogin retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_intra_login_key'.
func UserByIntraLogin(db XODB, intraLogin sql.NullString) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, full_name, intra_login, intra_user_id ` +
		`FROM public.users ` +
		`WHERE intra_login = $1`

	// run query
	XOLog(sqlstr, intraLogin)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, intraLogin).Scan(&u.ID, &u.FullName, &u.IntraLogin, &u.IntraUserID)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, full_name, intra_login, intra_user_id ` +
		`FROM public.users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.FullName, &u.IntraLogin, &u.IntraUserID)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
