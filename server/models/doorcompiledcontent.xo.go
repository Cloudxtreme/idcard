// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// DoorCompiledContent represents a row from 'public.door_compiled_content'.
type DoorCompiledContent struct {
	ID              int           `json:"id"`               // id
	DoorID          int           `json:"door_id"`          // door_id
	Patches         []byte        `json:"patches"`          // patches
	UnprotectedFull []byte        `json:"unprotected_full"` // unprotected_full
	ProtectedFull   []byte        `json:"protected_full"`   // protected_full
	CreatedAt       time.Time     `json:"created_at"`       // created_at
	CreatedBy       int           `json:"created_by"`       // created_by
	Activated       bool          `json:"activated"`        // activated
	NeedsApproval   bool          `json:"needs_approval"`   // needs_approval
	ApprovedBy      sql.NullInt64 `json:"approved_by"`      // approved_by

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DoorCompiledContent exists in the database.
func (dcc *DoorCompiledContent) Exists() bool {
	return dcc._exists
}

// Deleted provides information if the DoorCompiledContent has been deleted from the database.
func (dcc *DoorCompiledContent) Deleted() bool {
	return dcc._deleted
}

// Insert inserts the DoorCompiledContent to the database.
func (dcc *DoorCompiledContent) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dcc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.door_compiled_content (` +
		`door_id, patches, unprotected_full, protected_full, created_at, created_by, activated, needs_approval, approved_by` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, dcc.DoorID, dcc.Patches, dcc.UnprotectedFull, dcc.ProtectedFull, dcc.CreatedAt, dcc.CreatedBy, dcc.Activated, dcc.NeedsApproval, dcc.ApprovedBy)
	err = db.QueryRow(sqlstr, dcc.DoorID, dcc.Patches, dcc.UnprotectedFull, dcc.ProtectedFull, dcc.CreatedAt, dcc.CreatedBy, dcc.Activated, dcc.NeedsApproval, dcc.ApprovedBy).Scan(&dcc.ID)
	if err != nil {
		return err
	}

	// set existence
	dcc._exists = true

	return nil
}

// Update updates the DoorCompiledContent in the database.
func (dcc *DoorCompiledContent) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dcc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dcc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.door_compiled_content SET (` +
		`door_id, patches, unprotected_full, protected_full, created_at, created_by, activated, needs_approval, approved_by` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE id = $10`

	// run query
	XOLog(sqlstr, dcc.DoorID, dcc.Patches, dcc.UnprotectedFull, dcc.ProtectedFull, dcc.CreatedAt, dcc.CreatedBy, dcc.Activated, dcc.NeedsApproval, dcc.ApprovedBy, dcc.ID)
	_, err = db.Exec(sqlstr, dcc.DoorID, dcc.Patches, dcc.UnprotectedFull, dcc.ProtectedFull, dcc.CreatedAt, dcc.CreatedBy, dcc.Activated, dcc.NeedsApproval, dcc.ApprovedBy, dcc.ID)
	return err
}

// Save saves the DoorCompiledContent to the database.
func (dcc *DoorCompiledContent) Save(db XODB) error {
	if dcc.Exists() {
		return dcc.Update(db)
	}

	return dcc.Insert(db)
}

// Upsert performs an upsert for DoorCompiledContent.
//
// NOTE: PostgreSQL 9.5+ only
func (dcc *DoorCompiledContent) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if dcc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.door_compiled_content (` +
		`id, door_id, patches, unprotected_full, protected_full, created_at, created_by, activated, needs_approval, approved_by` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, door_id, patches, unprotected_full, protected_full, created_at, created_by, activated, needs_approval, approved_by` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.door_id, EXCLUDED.patches, EXCLUDED.unprotected_full, EXCLUDED.protected_full, EXCLUDED.created_at, EXCLUDED.created_by, EXCLUDED.activated, EXCLUDED.needs_approval, EXCLUDED.approved_by` +
		`)`

	// run query
	XOLog(sqlstr, dcc.ID, dcc.DoorID, dcc.Patches, dcc.UnprotectedFull, dcc.ProtectedFull, dcc.CreatedAt, dcc.CreatedBy, dcc.Activated, dcc.NeedsApproval, dcc.ApprovedBy)
	_, err = db.Exec(sqlstr, dcc.ID, dcc.DoorID, dcc.Patches, dcc.UnprotectedFull, dcc.ProtectedFull, dcc.CreatedAt, dcc.CreatedBy, dcc.Activated, dcc.NeedsApproval, dcc.ApprovedBy)
	if err != nil {
		return err
	}

	// set existence
	dcc._exists = true

	return nil
}

// Delete deletes the DoorCompiledContent from the database.
func (dcc *DoorCompiledContent) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dcc._exists {
		return nil
	}

	// if deleted, bail
	if dcc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.door_compiled_content WHERE id = $1`

	// run query
	XOLog(sqlstr, dcc.ID)
	_, err = db.Exec(sqlstr, dcc.ID)
	if err != nil {
		return err
	}

	// set deleted
	dcc._deleted = true

	return nil
}

// UserByApprovedBy returns the User associated with the DoorCompiledContent's ApprovedBy (approved_by).
//
// Generated from foreign key 'door_compiled_content_approved_by_fkey'.
func (dcc *DoorCompiledContent) UserByApprovedBy(db XODB) (*User, error) {
	return UserByID(db, int(dcc.ApprovedBy.Int64))
}

// UserByCreatedBy returns the User associated with the DoorCompiledContent's CreatedBy (created_by).
//
// Generated from foreign key 'door_compiled_content_created_by_fkey'.
func (dcc *DoorCompiledContent) UserByCreatedBy(db XODB) (*User, error) {
	return UserByID(db, dcc.CreatedBy)
}

// Door returns the Door associated with the DoorCompiledContent's DoorID (door_id).
//
// Generated from foreign key 'door_compiled_content_door_id_fkey'.
func (dcc *DoorCompiledContent) Door(db XODB) (*Door, error) {
	return DoorByID(db, dcc.DoorID)
}

// DoorCompiledContentByID retrieves a row from 'public.door_compiled_content' as a DoorCompiledContent.
//
// Generated from index 'door_compiled_content_pkey'.
func DoorCompiledContentByID(db XODB, id int) (*DoorCompiledContent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, door_id, patches, unprotected_full, protected_full, created_at, created_by, activated, needs_approval, approved_by ` +
		`FROM public.door_compiled_content ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	dcc := DoorCompiledContent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&dcc.ID, &dcc.DoorID, &dcc.Patches, &dcc.UnprotectedFull, &dcc.ProtectedFull, &dcc.CreatedAt, &dcc.CreatedBy, &dcc.Activated, &dcc.NeedsApproval, &dcc.ApprovedBy)
	if err != nil {
		return nil, err
	}

	return &dcc, nil
}
