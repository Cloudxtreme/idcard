// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import "errors"

// AccessGroupUser represents a row from 'public.access_group_users'.
type AccessGroupUser struct {
	ID            int  `json:"id"`              // id
	AccessGroupID int  `json:"access_group_id"` // access_group_id
	UserID        int  `json:"user_id"`         // user_id
	IsManager     bool `json:"is_manager"`      // is_manager

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AccessGroupUser exists in the database.
func (agu *AccessGroupUser) Exists() bool {
	return agu._exists
}

// Deleted provides information if the AccessGroupUser has been deleted from the database.
func (agu *AccessGroupUser) Deleted() bool {
	return agu._deleted
}

// Insert inserts the AccessGroupUser to the database.
func (agu *AccessGroupUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if agu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.access_group_users (` +
		`access_group_id, user_id, is_manager` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, agu.AccessGroupID, agu.UserID, agu.IsManager)
	err = db.QueryRow(sqlstr, agu.AccessGroupID, agu.UserID, agu.IsManager).Scan(&agu.ID)
	if err != nil {
		return err
	}

	// set existence
	agu._exists = true

	return nil
}

// Update updates the AccessGroupUser in the database.
func (agu *AccessGroupUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !agu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if agu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.access_group_users SET (` +
		`access_group_id, user_id, is_manager` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, agu.AccessGroupID, agu.UserID, agu.IsManager, agu.ID)
	_, err = db.Exec(sqlstr, agu.AccessGroupID, agu.UserID, agu.IsManager, agu.ID)
	return err
}

// Save saves the AccessGroupUser to the database.
func (agu *AccessGroupUser) Save(db XODB) error {
	if agu.Exists() {
		return agu.Update(db)
	}

	return agu.Insert(db)
}

// Upsert performs an upsert for AccessGroupUser.
//
// NOTE: PostgreSQL 9.5+ only
func (agu *AccessGroupUser) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if agu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.access_group_users (` +
		`id, access_group_id, user_id, is_manager` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, access_group_id, user_id, is_manager` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.access_group_id, EXCLUDED.user_id, EXCLUDED.is_manager` +
		`)`

	// run query
	XOLog(sqlstr, agu.ID, agu.AccessGroupID, agu.UserID, agu.IsManager)
	_, err = db.Exec(sqlstr, agu.ID, agu.AccessGroupID, agu.UserID, agu.IsManager)
	if err != nil {
		return err
	}

	// set existence
	agu._exists = true

	return nil
}

// Delete deletes the AccessGroupUser from the database.
func (agu *AccessGroupUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !agu._exists {
		return nil
	}

	// if deleted, bail
	if agu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.access_group_users WHERE id = $1`

	// run query
	XOLog(sqlstr, agu.ID)
	_, err = db.Exec(sqlstr, agu.ID)
	if err != nil {
		return err
	}

	// set deleted
	agu._deleted = true

	return nil
}

// AccessGroup returns the AccessGroup associated with the AccessGroupUser's AccessGroupID (access_group_id).
//
// Generated from foreign key 'access_group_users_access_group_id_fkey'.
func (agu *AccessGroupUser) AccessGroup(db XODB) (*AccessGroup, error) {
	return AccessGroupByID(db, agu.AccessGroupID)
}

// User returns the User associated with the AccessGroupUser's UserID (user_id).
//
// Generated from foreign key 'access_group_users_user_id_fkey'.
func (agu *AccessGroupUser) User(db XODB) (*User, error) {
	return UserByID(db, agu.UserID)
}

// AccessGroupUserByID retrieves a row from 'public.access_group_users' as a AccessGroupUser.
//
// Generated from index 'access_group_users_pkey'.
func AccessGroupUserByID(db XODB, id int) (*AccessGroupUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, access_group_id, user_id, is_manager ` +
		`FROM public.access_group_users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	agu := AccessGroupUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&agu.ID, &agu.AccessGroupID, &agu.UserID, &agu.IsManager)
	if err != nil {
		return nil, err
	}

	return &agu, nil
}
