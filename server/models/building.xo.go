// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import "errors"

// Building represents a row from 'public.buildings'.
type Building struct {
	ID        int    `json:"id"`         // id
	Name      string `json:"name"`       // name
	NumFloors int    `json:"num_floors"` // num_floors

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Building exists in the database.
func (b *Building) Exists() bool {
	return b._exists
}

// Deleted provides information if the Building has been deleted from the database.
func (b *Building) Deleted() bool {
	return b._deleted
}

// Insert inserts the Building to the database.
func (b *Building) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.buildings (` +
		`name, num_floors` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, b.Name, b.NumFloors)
	err = db.QueryRow(sqlstr, b.Name, b.NumFloors).Scan(&b.ID)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Building in the database.
func (b *Building) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.buildings SET (` +
		`name, num_floors` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, b.Name, b.NumFloors, b.ID)
	_, err = db.Exec(sqlstr, b.Name, b.NumFloors, b.ID)
	return err
}

// Save saves the Building to the database.
func (b *Building) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Building.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Building) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.buildings (` +
		`id, name, num_floors` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, num_floors` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.num_floors` +
		`)`

	// run query
	XOLog(sqlstr, b.ID, b.Name, b.NumFloors)
	_, err = db.Exec(sqlstr, b.ID, b.Name, b.NumFloors)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Building from the database.
func (b *Building) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.buildings WHERE id = $1`

	// run query
	XOLog(sqlstr, b.ID)
	_, err = db.Exec(sqlstr, b.ID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BuildingByID retrieves a row from 'public.buildings' as a Building.
//
// Generated from index 'buildings_pkey'.
func BuildingByID(db XODB, id int) (*Building, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, num_floors ` +
		`FROM public.buildings ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	b := Building{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&b.ID, &b.Name, &b.NumFloors)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
